pipeline {
    agent any

    tools {
        jdk 'jdk' // This must match the name you configured | This installs jdk17 automatically from Jenkins Global Tools config
        // jdk 17 is installed inside the jenkins conatiner 
    }

    environment {
        SONAR_HOME = tool 'sonar-scanner' // Make sure this tool is configured in Jenkins Global Tools
        SONAR_HOST_URL = 'http://192.168.5.5:9000' // sonarqube server 
        SONAR_PROJECT_KEY = 'wise-croc-school-service-backend' // project key in sonar qube
    }

    stages {
        stage("Clean Workspace") {
            steps {
                echo "Cleaning workspace"
                cleanWs()
            }
        }

        stage("Code Checkout from GitHub") {
            steps {
                echo "Checking out code from GitHub"
                checkout scmGit(
                    branches: [[name: '*/staging']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-token',
                        url: 'https://github.com/CynoteckTools/WiseCrocSchoolServices.git'
                    ]]
                )
            }
        }

        stage("Build with Gradle") {
            steps {
                echo "Building the project with Gradle Wrapper"
                // Ensure gradlew is executable before running
                sh '''
                    chmod +x ./gradlew
                    ./gradlew clean build
                '''
            }
        }

        stage("SonarQube Quality Analysis") {
            steps {
                echo "Running SonarQube analysis"
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SONAR_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                        -Dsonar.projectName=$SONAR_PROJECT_KEY \
                        -Dsonar.java.binaries=build/classes
                    '''
                }
            }
        }

        stage("SonarQube Quality Gate") {
            steps {
                echo "Waiting for SonarQube Quality Gate result"
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage("Download SonarQube JSON Report") {
            steps {
                echo "Downloading detailed JSON report from SonarQube"
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        curl -s -u $SONAR_TOKEN: \
                        "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,security_hotspots" \
                        -o sonar-detailed-report.json
                    '''
                }
            }
        }

        stage('Trivy Full Project Scan') {
            steps {
                echo "Running full Trivy scan"
                sh '''
                    trivy fs . \
                        --scanners vuln,secret,config,license \
                        --severity LOW,MEDIUM,HIGH,CRITICAL \
                        --format table \
                        --output trivy-full-scan-report.txt \
                        --no-progress \
                        --include-dev-deps \
                        --list-all-pkgs

                    trivy fs . \
                        --scanners vuln,secret,config,license \
                        --severity LOW,MEDIUM,HIGH,CRITICAL \
                        --format json \
                        --output trivy-full-scan-report.json \
                        --no-progress \
                        --include-dev-deps \
                        --list-all-pkgs
                '''
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully"
            archiveArtifacts artifacts: 'sonar-detailed-report.json, trivy-full-scan-report.txt, trivy-full-scan-report.json', onlyIfSuccessful: true
        }
        failure {
            echo "Pipeline failed"
        }
    }
}
