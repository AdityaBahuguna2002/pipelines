pipeline{
    agent any 
    
    environment{
        SONAR_HOME = tool "sonar" // tool use sonaqube their credentials here 
        IMAGE_NAME = "react-app" // image name mention in docker-compose.yml file 
        COMPOSE_FILE = "docker-compose.yml"
    }
    
    stages{
        stage('Github code Checkout'){
            steps{
                echo "Code from github"
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-token', url: 'https://github.com/CynoteckTools/cptfrontendcode.git']])
            }
        }
        stage("Sonarqube Quality Analysis"){
            steps {
                echo "Sonarqube quality analysis check "
                withSonarQubeEnv("sonar"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=cptfrontendcode -Dsonar.projectKey=cptfrontendcode "
                }
            }
        }
        stage("OWASP Dependency Check"){  //
            steps {
                echo "OWASP Dependency check here"
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: "**/dependency-check-report.xml"
            }
        }
        stage('Sonar Quality Gate scan'){
            steps{
                timeout(time:2, unit:"MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("Trivy File System scan"){
            steps{
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        stage('Docker Build an image') {
            steps {                
                script {                    
                    def imageTag = "adityabahuguna2002/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker build -t ${imageTag} ."
                }
            }
        }
 
        stage('Docker Push to Push an Image to Docker Hub') {
            steps {                
                script {                    
                        def imageTag = "adityabahuguna2002/${IMAGE_NAME}:${BUILD_NUMBER}"                    
                        withDockerRegistry(credentialsId: 'docker-hub', toolName: 'docker') {   
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }
        stage("Docker-Compose Deploy"){
            steps{
                echo "Docker-compose Deploying the code"
                script{
                    sh """
                        docker-compose down || true
                        docker-compose up -d --build
                       """
                }
            }
        }
    }
    post{
        success{
            echo "deployed successfully"
        }
        failure{
            echo "deployment failed"
        }
    }
}
